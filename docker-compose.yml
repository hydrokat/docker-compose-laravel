version: '3'

networks:
  laravel:


services:
  site:
    build:
      context: .
      dockerfile: nginx.dockerfile
    ports:
      - 80:80
      # - 6001:6001 uncomment when using laravel-ws
    volumes:
      - ./src:/var/www/html:delegated
    depends_on:
      - redis
      - mysql
      - php
      - queue-worker
      - cron
      - mailpit
      # - keycloak #uncomment if using keycloak for auth
    networks:
      - laravel

  php:
    restart: unless-stopped
    build:
      context: .
      dockerfile: frankenphp.dockerfile
    volumes:
      - ./src:/app:delegated
    networks:
      - laravel

  queue-worker:
    restart: unless-stopped
    build:
      context: .
      dockerfile: php.dockerfile
    volumes:
      - ./src:/var/www/html:delegated
    networks:
      - laravel

  mysql:
    image: mysql:8
    restart: unless-stopped
    tty: true
    ports:
      - 3306:3306
    volumes:
      - ./data/mysql:/var/lib/mysql
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    networks:
      - laravel

  phpws:
    build:
      context: .
      dockerfile: php.dockerfile
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M
      replicas: 4
    # ports:
    #   - 6001:6001
    volumes:
      - ./src:/var/www/html:delegated
    networks:
      - laravel

  redis:
    image: redis:alpine
    restart: unless-stopped
    ports:
      - 6379:6379
    networks:
      - laravel

  composer:
    build:
      context: .
      dockerfile: composer.dockerfile
    volumes:
      - ./src:/var/www/html
    working_dir: /var/www/html
    user: laravel
    entrypoint: [ 'composer', '--ignore-platform-reqs' ]
    networks:
      - laravel

  installer:
    build:
      context: .
      dockerfile: composer.dockerfile
    volumes:
      - ./src:/var/www/html
    working_dir: /var/www/html
    user: laravel
    entrypoint: [ 'composer', 'create-project', '--prefer-dist', 'laravel/laravel', '.' ]
    networks:
      - laravel

  pint:
    image: syncloudsoftech/pinter
    volumes:
      - ./src:/workspace
    networks:
      - laravel

  npm:
    image: node:lts
    volumes:
      - ./src:/var/www/html
    working_dir: /var/www/html
    entrypoint: [ 'npm' ]
    networks:
      - laravel

  npx:
    image: node:lts
    volumes:
      - ./src:/var/www/html
    working_dir: /var/www/html
    entrypoint: [ 'npm' ]
    networks:
      - laravel

  artisan:
    build:
      context: .
      dockerfile: php.dockerfile
    volumes:
      - ./src:/var/www/html:delegated
    depends_on:
      - mysql
    working_dir: /var/www/html
    user: laravel
    entrypoint: [ 'php', '/var/www/html/artisan' ]
    networks:
      - laravel

  cron:
    build:
      context: .
      dockerfile: cron.dockerfile
    container_name: cron
    volumes:
      - ./src:/var/www/html
    networks:
      - laravel

  mailpit:
    image: axllent/mailpit:latest
    ports:
      - 1025:1025
      - 8025:8025
    networks:
      - laravel

  postgres:
    image: postgres
    restart: unless-stopped
    volumes:
      # - postgres_data:/var/lib/postgresql/data
      - ./data/postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: password
    networks:
      - laravel

  keycloak:
    # image: quay.io/keycloak/keycloak:latest
    image: quay.io/keycloak/keycloak:legacy
    restart: unless-stopped
    environment:
      DB_VENDOR: POSTGRES
      DB_ADDR: postgres
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_SCHEMA: public
      DB_PASSWORD: password
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: Pa55w0rd
      # Uncomment the line below if you want to specify JDBC parameters. The parameter below is just an example, and it shouldn't be used in production without knowledge. It is highly recommended that you read the PostgreSQL JDBC driver documentation in order to use it.
      #JDBC_PARAMS: "ssl=true"
      # ports:
      #   - 8080:8080
    depends_on:
      - postgres
    networks:
      - laravel
